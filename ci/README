=====================================================
Horde continuous integration setup (based on Jenkins)
=====================================================

Introduction
~~~~~~~~~~~~

This repository allows you to install the Horde continuous integration
setup. The setup has currently only been tested with Ubuntu 10.04. The
provided toolset may not be applicable in all situations but it might
help the one or the other to generate a copy of http://ci.horde.org.

Requirements
~~~~~~~~~~~~

Before installing this you need to have the following software
installed:

 - Make
 - PHP with the xdebug extension
 - PEAR
 - Java (Sun JDK)
 - Ant

Installation
~~~~~~~~~~~~

In order to allow for local configuration settings you need to copy
the distributed configuration file first:

cp ./etc/jenkins.local.dist ./etc/jenkins.local

Now you can edit ./etc/jenkins.local and override any settings from
./jenkins/etc/jenkins in there. You will find some suggestions in
./etc/jenkins.local. It is most likely that you would want to fix the
user name used to run the jenkins server. The default is "jenkins" which
might not exist on your system. Especially for test installations you
should simply set JENKINS_USER to your own user name.

Once the configuration has been set you can simply run

 make install

followed by

 make start

You should be able to connect to http://localhost:8080 now. Login as a
local user on your system. In order to get started you need to trigger
the build on the "php-ci-tools" job.

Usage
~~~~~

1. Starting / Stopping the server

 make start

should fire the server up

 make stop

should kill the server.


2. Adding new jobs

Before adding any new jobs on ci.horde.org you should pull a local
copy, setup the system and check that your new job does not fail.

You can add the new job by adding the name to the "JOBS" variable in
the Makefile. You can currently only add framework packages there.

In addition you need to add the job name manually in the configuration
file

 workdir/jobs/horde/config.xml

This one has a long list of dependent packages and you will need to
add your new job name there.

No you should be able to create the job directory by running

 make job-NEWJOBNAME

with NEWJOBNAME being the name of your new job.

You should ensure that all old job state from the other framework
packages gets deleted before you restart your jenkins server. This is
not strictly necessary but is something you should do when working on
ci.horde.org. It can happen that Jenkins looses information on a
restart and will report failing builds which can be avoided by
cleaning up before restarting. You need to run

 make clean-jobs

in order to clean the system.

Issue

 make stop

followed by

 make start

to restart Jenkins and make it note the new job. Trigger the "horde"
build and ensure the new job is green.

Commit and push the new job now, connect to ci.horde.org, pull there, run

 make stop
 make clean-jobs
 make start

to update ci.horde.org


3. Regenerate all jobs

In case you modified the job configuration in
./templates/hudson-component-config.xml.template you will have to
regenerate all jobs which can be done by running

 make jenkins-jobs


4. Cleanup

If you accumulated too much job data you can cleanup all build data by
running:

 make clean-jobs

All history will be lost that way!

If you want to get a completely clean work directory you can run

 make clean-all


Uninstall
~~~~~~~~~

Simply run

 make stop

followed by

 make clean-all

This should fully remove the hudson server and cleanup all old build
data.


