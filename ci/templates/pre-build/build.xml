<?php
$options = $config->getOptions();
if (!isset($options['toolsdir'])) {
    throw new Components_Exception(
        'You are required to set the path to a PEAR tool environment.'
    );
}
$component = $config->getComponent();
$job = preg_replace('/^Horde_/', '', $component->getName());
if (preg_match('/^Horde_/', $component->getName())) {
    $job_path = 'framework/' . $job;
} else {
    $job_path = $job;
}
$toolsdir = $options['toolsdir'];
$hash = md5(serialize($component->getDependencies()));
$hash_file = $options['ciprebuild'] . '/deps/.deps.hash';
if (file_exists($hash_file)) {
    $old_hash = file_get_contents($hash_file);
} else {
    $old_hash = false;
}

echo '<?xml version="1.0" encoding="UTF-8"?>' . "\n\n";
?>
<project name="<?php echo $job;?>" default="build" basedir=".">
 <property name="tooldir" location="<?php echo $toolsdir; ?>"/>
 <property name="incdirs" location="${basedir}/lib:${basedir}/deps/pear/php:${tooldir}/php"/>
 <property name="incdirs-install" location="${tooldir}/php"/>
 <property environment="env"/>
 <property name="job_name" value="${env.JOB_NAME}"/>

 <target name="build"
	 description="Orchestrates the execution of the various tools."
	 depends="prepare,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdoc,docblox,phpunit,phpcb"
	 />

 <target name="build-parallel"
	 description="Orchestrates the execution of the various tools - some of them will be executed in parallel."
	 depends="prepare,lint,tools-parallel,phpunit,phpcb"
	 />

 <target name="tools-parallel"
         description="Bundles tools that can be run in parallel.">
   <parallel threadCount="2">
     <sequential>
       <antcall target="pdepend"/>
       <antcall target="phpmd-ci"/>
     </sequential>
     <antcall target="phpcpd"/>
     <antcall target="phpcs-ci"/>
     <antcall target="phploc"/>
     <antcall target="phpdoc"/>
     <antcall target="docblox"/>
   </parallel>
 </target>

 <target name="make-deps"
	 description="Creates the library the package depends on (if required).">
  <?php if ($old_hash === false || $old_hash !== $hash): ?>
    <!-- Remove the deps directory. -->
    <delete dir="deps"/>

    <mkdir dir="${basedir}/deps"/>

    <exec executable="php">
     <arg line="-d include_path=${incdirs-install} ${tooldir}/horde-components
                ${basedir}/../../horde-git/workspace/<?php echo $job_path;?>
                install --destination=${basedir}/deps
                --channelxmlpath=${basedir}/../../horde-pear-dependencies/workspace/channels
                --sourcepath=${basedir}/../../horde-pear-dependencies/workspace/packages
                --instructions=${basedir}/dependency.instructions -N" />
    </exec>

    <echo message="<?php echo $hash;?>"
          file="<?php echo $hash_file;?>"
          />
  <?php endif;?>
 </target>

 <target name="clean"
	 description="Cleanup build artifacts.">
   <delete dir="${basedir}/build/api"/>
   <delete dir="${basedir}/build/xapi"/>
   <delete dir="${basedir}/build/code-browser"/>
   <delete dir="${basedir}/build/coverage"/>
   <delete dir="${basedir}/build/logs"/>
   <delete dir="${basedir}/build/pdepend"/>
 </target>

 <target name="prepare"
	 depends="make-deps,clean"
         description="Prepare for build.">
   <mkdir dir="${basedir}/build/api"/>
   <mkdir dir="${basedir}/build/xapi"/>
   <mkdir dir="${basedir}/build/code-browser"/>
   <mkdir dir="${basedir}/build/coverage"/>
   <mkdir dir="${basedir}/build/logs"/>
   <mkdir dir="${basedir}/build/pdepend"/>
 </target>

 <target name="lint"
	 description="Check PHP files for parse errors.">
  <apply executable="php" failonerror="true">
   <arg value="-l" />

   <fileset dir="${basedir}/lib">
    <include name="**/*.php" />
   </fileset>

   <fileset dir="${basedir}/test">
    <include name="**/*.php" />
   </fileset>
  </apply>
 </target>

 <target name="phploc"
	 description="Measure project size using PHPLOC and generate phploc.csv.">
  <exec executable="php">
   <arg value="-d include_path=${incdirs}" />
   <arg path="${tooldir}/phploc" />
   <arg value="--log-csv" />
   <arg path="${basedir}/build/logs/phploc.csv" />
   <arg path="${basedir}/lib" />
  </exec>
 </target>

 <target name="pdepend"
         description="Calculate software metrics using PHP_Depend and generate jdepend.xml.">
   <exec executable="php">
     <arg value="-d include_path=${incdirs}"/>
     <arg path="${tooldir}/pdepend"/>
     <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
     <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
     <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
     <arg path="${basedir}/lib" />
   </exec>
 </target>

 <target name="phpmd"
         description="Perform project mess detection using PHPMD and generate pmd.xml.">
   <exec executable="php">
     <arg value="-d include_path=${incdirs}" />
     <arg path="${tooldir}/phpmd" />
     <arg path="${basedir}/lib" />
     <arg value="text" />
     <arg path="${basedir}/phpmd.xml" />
   </exec>
 </target>

 <target name="phpmd-ci"
         description="Perform project mess detection using PHPMD.">
   <exec executable="php">
     <arg value="-d include_path=${incdirs}" />
     <arg path="${tooldir}/phpmd" />
     <arg path="${basedir}/lib" />
     <arg value="xml" />
     <arg path="${basedir}/phpmd.xml" />
     <arg value="--reportfile" />
     <arg path="${basedir}/build/logs/pmd.xml" />
   </exec>
 </target>

 <target name="phpcs"
         description="Find coding standard violations using PHP_CodeSniffer.">
   <exec executable="php">
     <arg value="-d include_path=${incdirs}" />
     <arg path="${tooldir}/phpcs" />
     <arg value="--standard=${basedir}/phpcs.xml" />
     <arg path="${basedir}/lib" />
   </exec>
 </target>

 <target name="phpcs-ci"
         description="Find coding standard violations using PHP_CodeSniffer and generate checkstyle.xml.">
   <exec executable="php" output="/dev/null">
     <arg value="-d include_path=${incdirs}" />
     <arg path="${tooldir}/phpcs" />
     <arg value="--report=checkstyle" />
     <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
     <arg value="--standard=${basedir}/phpcs.xml" />
     <arg path="${basedir}/lib" />
   </exec>
 </target>

 <target name="phpcpd"
	 description="Find duplicate code using PHPCPD and generate pmd-cpd.xml.">
   <exec executable="php">
     <arg value="-d include_path=${incdirs}" />
     <arg path="${tooldir}/phpcpd" />
     <arg value="--log-pmd" />
     <arg path="${basedir}/build/logs/pmd-cpd.xml" />
     <arg path="${basedir}/lib" />
   </exec>
 </target>

 <target name="phpdoc"
         description="Generate API documentation using PHPDocumentor.">
   <exec executable="php">
     <arg value="-d include_path=${incdirs}" />
     <arg path="${tooldir}/phpdoc" />
     <arg value="--directory" />
     <arg path="${basedir}/lib" />
     <arg value="--target" />
     <arg path="${basedir}/build/api" />
   </exec>
 </target>

 <target name="docblox"
        description="Generate API documentation using DocBlox.">
   <exec executable="php">
     <arg value="-d include_path=${incdirs}" />
     <arg path="${tooldir}/docblox" />
     <arg value="project:run" />
     <arg value="--directory" />
     <arg path="${basedir}/lib" />
     <arg value="--target" />
     <arg path="${basedir}/build/xapi" />
  </exec>
</target>

 <!-- Run unit tests and generate junit.xml and clover.xml -->
 <target name="phpunit">
   <exec executable="php" failonerror="true">
     <env key="DB_ADAPTER_MYSQL_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="DB_ADAPTER_MYSQLI_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="DB_ADAPTER_PDO_MYSQL_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="DB_ADAPTER_PDO_MYSQLI_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="DB_ADAPTER_PDO_PGSQL_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="GROUP_SQL_MYSQL_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="GROUP_SQL_MYSQLI_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="GROUP_SQL_PDO_MYSQL_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="GROUP_SQL_PDO_MYSQLI_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="GROUP_SQL_PDO_PGSQL_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="GROUP_LDAP_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="PREFS_SQL_MYSQL_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="PREFS_SQL_MYSQLI_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="PREFS_SQL_PDO_MYSQL_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="PREFS_SQL_PDO_MYSQLI_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="PREFS_SQL_PDO_PGSQL_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="SHARE_SQL_MYSQL_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="SHARE_SQL_MYSQLI_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="SHARE_SQL_PDO_MYSQL_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="SHARE_SQL_PDO_MYSQLI_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <env key="SHARE_SQL_PDO_PGSQL_TEST_CONFIG" value="${basedir}/../conf.php"/>
     <arg value="-d include_path=${incdirs}" />
     <arg path="${tooldir}/phpunit" />
  </exec>
 </target>

 <target name="phpcb"
         description="Aggregate tool output with PHP_CodeBrowser.">
   <exec executable="php">
     <arg value="-d include_path=${incdirs}" />
     <arg path="${tooldir}/phpcb" />
     <arg value="--log" />
     <arg path="${basedir}/build/logs" />
     <arg value="--source" />
     <arg path="${basedir}/lib" />
     <arg value="--output" />
     <arg path="${basedir}/build/code-browser" />
   </exec>
 </target>

</project>
